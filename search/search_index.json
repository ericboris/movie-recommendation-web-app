{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Sprint 1: Project Setup and Basic Structure Project repository created and version control set up (e.g., Git). I created a new project directory in the terminal. mkdir movie_recommendation_app && cd movie_recommendation_app In the project directory I created the initial folder hierarchy. mkdir -p frontend/public frontend/src/components frontend/src/services mkdir -p backend/app/models backend/app/services backend/app/utils backend/migrations backend/tests I added a README to the project directory. touch README.md I installed and configured the project to use MkDocs. pip3 install mkdocs mkdocs new . Development environment configured with necessary tools and libraries. I installed Node.js and npm from https://nodejs.org/en/ and verified with node -v npm -v I installed and verified React and React-Router. npm install react react-dom react-router-dom npx create-react-app new_app && cd new_app && npm start I installed MySQL Community Server from https://www.mysql.com/downloads/. Initial verification with mysql -V failed and I had to add mysql to my path. vim ~/.zshrc export PATH = $PATH :/usr/local/mysql/bin/ I verified that the server was running. mysql -u root -p In the server at the prompt I created a new username and password. CREATE USER 'new_user' @ 'localhost' IDENTIFIED BY 'new_password' ; I created a new database. CREATE DATABASE db_name ; I granted privileges to new_user to db_name. GRANT ALL PRIVILEGES ON db_name . * TO 'new_user' @ 'localhost' ; I applied the changes. FLUSH PRIVILEGES ; And I exited the server. EXIT ; I installed PyMySQL. python3 -m pip install PyMySQL I installed Flask, Flask-SQLAlchemy, and Flask-CORS. pip3 install Flask Flask-SQLAlchemy Flask-CORS And made a sample app to verify the installations. mkdir flask_test_app && cd flask_test_app & touch app.py In app.py I wrote: from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_cors import CORS import pymysql app = Flask ( __name__ ) CORS ( app ) app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'mysql+pymysql://user_name:password@localhost/db_name' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = False db = SQLAlchemy ( app ) @app . route ( \"/\" ) def home (): return \"Hello World\" if __name__ == \"__main__\" : app . run ( debug = True ) I replaced user_name, password, and db_name with the user name, password, and database name that I chose when I created the user and database in the SQL prompt. I verified that the Flask installations were working. python3 app.py Basic structure and layout of the web application created using HTML, CSS, and JavaScript. I blocked out the basic structure of the site in HTML. I connected basic javascript functionality to the html pages. Design is low priority so I'll do CSS later. Simple static movie list for testing purposes integrated. I created staticMovieList.js in frontend/src/ . It contains a list of movie-objects of the form {id:int, title:str, releaseDate:str, description:str} . I updated movie_list.html to load staticMovieList.js , MovieCard.js , and MovieList.js using script tags. I added an event listener to MovieList.js to get the movie list from movie_list.html , pass the content of each movie to MovieCard.html to be rendered in html, and append the rendered html into the movie list html element. I updated MovieCard.js to receive a movie object and return it rendered as html. Sprint 2: Frontend Framework and Components Static website migrated to a dynamic React application. I initialized a new React app using npx create-react-app new-app inside my existing frontend/ directory. I moved my existing .js and .html files from my existing project into the appropriate directories in the new React app. I rebuilt any broken references between files so that the page links all worked correctly. I deleted any files in the frontend/ that were not the React app containing folder new-app/ . I moved all files from new-app/ into frontend/ . I deleted the empty new-app/ directory. Configure Parcel (Side Quest) I installed Parcel with: npm install --save-dev parcel parcel-plugin-static-files-copy I modified package.json to use Parcel: \"scripts\" : { \"start\" : \"parcel ./public/index.html\" , \"build\" : \"parcel build ./public/index.html --dist-dir ./dist\" } I removed the following script imports from index.html . < script src = \"https://unpkg.com/react@17.0.2/umd/react.development.js\" ></ script > < script src = \"https://unpkg.com/react-dom@17.0.2/umd/react-dom.development.js\" ></ script > Reusable React components created for different parts of the application (e.g., movie cards, rating system, search bar). I built basic LoginForm and SignupForm components that function as pop-ups when their respective buttons are clicked.","title":"Welcome"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#sprint-1-project-setup-and-basic-structure","text":"","title":"Sprint 1: Project Setup and Basic Structure"},{"location":"#project-repository-created-and-version-control-set-up-eg-git","text":"I created a new project directory in the terminal. mkdir movie_recommendation_app && cd movie_recommendation_app In the project directory I created the initial folder hierarchy. mkdir -p frontend/public frontend/src/components frontend/src/services mkdir -p backend/app/models backend/app/services backend/app/utils backend/migrations backend/tests I added a README to the project directory. touch README.md I installed and configured the project to use MkDocs. pip3 install mkdocs mkdocs new .","title":"Project repository created and version control set up (e.g., Git)."},{"location":"#development-environment-configured-with-necessary-tools-and-libraries","text":"I installed Node.js and npm from https://nodejs.org/en/ and verified with node -v npm -v I installed and verified React and React-Router. npm install react react-dom react-router-dom npx create-react-app new_app && cd new_app && npm start I installed MySQL Community Server from https://www.mysql.com/downloads/. Initial verification with mysql -V failed and I had to add mysql to my path. vim ~/.zshrc export PATH = $PATH :/usr/local/mysql/bin/ I verified that the server was running. mysql -u root -p In the server at the prompt I created a new username and password. CREATE USER 'new_user' @ 'localhost' IDENTIFIED BY 'new_password' ; I created a new database. CREATE DATABASE db_name ; I granted privileges to new_user to db_name. GRANT ALL PRIVILEGES ON db_name . * TO 'new_user' @ 'localhost' ; I applied the changes. FLUSH PRIVILEGES ; And I exited the server. EXIT ; I installed PyMySQL. python3 -m pip install PyMySQL I installed Flask, Flask-SQLAlchemy, and Flask-CORS. pip3 install Flask Flask-SQLAlchemy Flask-CORS And made a sample app to verify the installations. mkdir flask_test_app && cd flask_test_app & touch app.py In app.py I wrote: from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_cors import CORS import pymysql app = Flask ( __name__ ) CORS ( app ) app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'mysql+pymysql://user_name:password@localhost/db_name' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = False db = SQLAlchemy ( app ) @app . route ( \"/\" ) def home (): return \"Hello World\" if __name__ == \"__main__\" : app . run ( debug = True ) I replaced user_name, password, and db_name with the user name, password, and database name that I chose when I created the user and database in the SQL prompt. I verified that the Flask installations were working. python3 app.py","title":"Development environment configured with necessary tools and libraries."},{"location":"#basic-structure-and-layout-of-the-web-application-created-using-html-css-and-javascript","text":"I blocked out the basic structure of the site in HTML. I connected basic javascript functionality to the html pages. Design is low priority so I'll do CSS later.","title":"Basic structure and layout of the web application created using HTML, CSS, and JavaScript."},{"location":"#simple-static-movie-list-for-testing-purposes-integrated","text":"I created staticMovieList.js in frontend/src/ . It contains a list of movie-objects of the form {id:int, title:str, releaseDate:str, description:str} . I updated movie_list.html to load staticMovieList.js , MovieCard.js , and MovieList.js using script tags. I added an event listener to MovieList.js to get the movie list from movie_list.html , pass the content of each movie to MovieCard.html to be rendered in html, and append the rendered html into the movie list html element. I updated MovieCard.js to receive a movie object and return it rendered as html.","title":"Simple static movie list for testing purposes integrated."},{"location":"#sprint-2-frontend-framework-and-components","text":"","title":"Sprint 2: Frontend Framework and Components"},{"location":"#static-website-migrated-to-a-dynamic-react-application","text":"I initialized a new React app using npx create-react-app new-app inside my existing frontend/ directory. I moved my existing .js and .html files from my existing project into the appropriate directories in the new React app. I rebuilt any broken references between files so that the page links all worked correctly. I deleted any files in the frontend/ that were not the React app containing folder new-app/ . I moved all files from new-app/ into frontend/ . I deleted the empty new-app/ directory.","title":"Static website migrated to a dynamic React application."},{"location":"#configure-parcel-side-quest","text":"I installed Parcel with: npm install --save-dev parcel parcel-plugin-static-files-copy I modified package.json to use Parcel: \"scripts\" : { \"start\" : \"parcel ./public/index.html\" , \"build\" : \"parcel build ./public/index.html --dist-dir ./dist\" } I removed the following script imports from index.html . < script src = \"https://unpkg.com/react@17.0.2/umd/react.development.js\" ></ script > < script src = \"https://unpkg.com/react-dom@17.0.2/umd/react-dom.development.js\" ></ script >","title":"Configure Parcel (Side Quest)"},{"location":"#reusable-react-components-created-for-different-parts-of-the-application-eg-movie-cards-rating-system-search-bar","text":"I built basic LoginForm and SignupForm components that function as pop-ups when their respective buttons are clicked.","title":"Reusable React components created for different parts of the application (e.g., movie cards, rating system, search bar)."}]}